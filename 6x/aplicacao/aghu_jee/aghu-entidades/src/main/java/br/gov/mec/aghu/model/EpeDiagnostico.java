package br.gov.mec.aghu.model;

// Generated 17/10/2011 14:21:24 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;


import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioSituacao;
import br.gov.mec.aghu.core.persistence.BaseEntityId;

/**
 * EpeDiagnosticos generated by hbm2java
 */
@Entity
@Table(name = "EPE_DIAGNOSTICOS", schema = "AGH")
public class EpeDiagnostico extends BaseEntityId<EpeDiagnosticoId> implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6983934700940693804L;
	private EpeDiagnosticoId id;
	private Integer version;
	private EpeSubgrupoNecesBasica subgrupoNecesBasica;
	private String descricao;
	private String definicao;
	private DominioSituacao situacao;
	private Set<EpeCaractDefDiagnostico> caractDefDiagnosticos = new HashSet<EpeCaractDefDiagnostico>(
			0);
	private Set<EpeFatRelDiagnostico> fatRelDiagnosticos = new HashSet<EpeFatRelDiagnostico>(
			0);

	public EpeDiagnostico() {
	}

	public EpeDiagnostico(EpeDiagnosticoId id,
			EpeSubgrupoNecesBasica subgrupoNecesBasica,
			String descricao, DominioSituacao situacao) {
		this.id = id;
		this.subgrupoNecesBasica = subgrupoNecesBasica;
		this.descricao = descricao;
		this.situacao = situacao;
	}

	public EpeDiagnostico(EpeDiagnosticoId id,
			EpeSubgrupoNecesBasica subgrupoNecesBasica,
			String descricao, String definicao, DominioSituacao situacao,
			Set<EpeCaractDefDiagnostico> caractDefDiagnosticos,
			Set<EpeFatRelDiagnostico> fatRelDiagnosticos) {
		this.id = id;
		this.subgrupoNecesBasica = subgrupoNecesBasica;
		this.descricao = descricao;
		this.definicao = definicao;
		this.situacao = situacao;
		this.caractDefDiagnosticos = caractDefDiagnosticos;
		this.fatRelDiagnosticos = fatRelDiagnosticos;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "snbGnbSeq", column = @Column(name = "SNB_GNB_SEQ", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "snbSequencia", column = @Column(name = "SNB_SEQUENCIA", nullable = false, precision = 3, scale = 0)),
			@AttributeOverride(name = "sequencia", column = @Column(name = "SEQUENCIA", nullable = false, precision = 4, scale = 0)) })
	public EpeDiagnosticoId getId() {
		return this.id;
	}

	public void setId(EpeDiagnosticoId id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION", nullable = false, precision = 9, scale = 0)
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "SNB_GNB_SEQ", referencedColumnName = "GNB_SEQ", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "SNB_SEQUENCIA", referencedColumnName = "SEQUENCIA", nullable = false, insertable = false, updatable = false) })
	public EpeSubgrupoNecesBasica getSubgrupoNecesBasica() {
		return this.subgrupoNecesBasica;
	}

	public void setSubgrupoNecesBasica(
			EpeSubgrupoNecesBasica subgrupoNecesBasica) {
		this.subgrupoNecesBasica = subgrupoNecesBasica;
	}

	@Column(name = "DESCRICAO", nullable = false, length = 80)
	@Length(max = 80)
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@Column(name = "DEFINICAO", length = 2000)
	@Length(max = 2000)
	public String getDefinicao() {
		return this.definicao;
	}

	public void setDefinicao(String definicao) {
		this.definicao = definicao;
	}

	@Column(name = "IND_SITUACAO", nullable = false, length = 1)
	@Enumerated(EnumType.STRING)
	public DominioSituacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(DominioSituacao situacao) {
		this.situacao = situacao;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "diagnostico")
	public Set<EpeCaractDefDiagnostico> getCaractDefDiagnosticos() {
		return this.caractDefDiagnosticos;
	}

	public void setCaractDefDiagnosticos(
			Set<EpeCaractDefDiagnostico> caractDefDiagnosticos) {
		this.caractDefDiagnosticos = caractDefDiagnosticos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "diagnostico")
	public Set<EpeFatRelDiagnostico> getFatRelDiagnosticos() {
		return this.fatRelDiagnosticos;
	}

	public void setFatRelDiagnosticos(
			Set<EpeFatRelDiagnostico> fatRelDiagnosticos) {
		this.fatRelDiagnosticos = fatRelDiagnosticos;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		EpeDiagnostico other = (EpeDiagnostico) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		return true;
	}
	
	public enum Fields {
		DESCRICAO("descricao"), 
		SITUACAO("situacao"), 
		SNB_GNB_SEQ("id.snbGnbSeq"), 
		SNB_SEQUENCIA("id.snbSequencia"), 
		SEQUENCIA("id.sequencia"), 
		SUBGRUPO_NECES_BASICA("subgrupoNecesBasica"),
		ID("id"),
		VERSION("version"),
		DEFINICAO("definicao");
		
		private String field;

		private Fields(String field) {
			this.field = field;
		}

		@Override
		public String toString() {
			return this.field;
		}
	}
	
	@Transient
	public String getDescricaoTrunc(Long size){
		if(size != null && getDescricao() != null && getDescricao().length() > size) {
			return getDescricao().substring(0,size.intValue()-2) + "...";
		} else {
			return getDescricao();
		}
	}
	
	@Transient
	public String getDefinicaoTrunc(Long size){
		if(size != null && getDefinicao() != null && getDefinicao().length() > size) {
			return getDefinicao().substring(0,size.intValue()-2) + "...";
		} else {
			return getDefinicao();
		}
	}	
}
