package br.gov.mec.aghu.model;

// Generated 14/09/2010 17:49:55 by Hibernate Tools 3.2.5.Beta

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.AssociationOverride;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.validator.constraints.Length;

import br.gov.mec.aghu.dominio.DominioIndPendenteItemPrescricao;
import br.gov.mec.aghu.dominio.DominioUnidadeHorasMinutos;
import br.gov.mec.aghu.prescricaomedica.util.PrescricaoMedicaTypes;
import br.gov.mec.aghu.core.exception.BaseRuntimeException;
import br.gov.mec.aghu.core.exception.BusinessExceptionCode;
import br.gov.mec.aghu.core.utils.AghuNumberFormat;
import br.gov.mec.aghu.core.utils.DateUtil;
import br.gov.mec.aghu.core.utils.TipoOperacaoEnum;

/**
 * MpmPrescricaoMdto generated by hbm2java
 */
@Entity
@Table(name = "MPM_PRESCRICAO_MDTOS", schema = "AGH")
@SuppressWarnings({"PMD.ExcessiveClassLength", "PMD.CyclomaticComplexity"})
@AssociationOverride(name = "servidorMovimentado", joinColumns = {
		@JoinColumn(name = "SER_MATRICULA_MOVIMENTADA"),
		@JoinColumn(name = "SER_VIN_CODIGO_MOVIMENTADA") })
public class MpmPrescricaoMdto extends ItemPrescricaoMedica<MpmPrescricaoMdtoId> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8961130365741027386L;

	private static final String DEBRA_LINHA = " <br/> ";

	private MpmPrescricaoMdtoId id;
	private MpmPrescricaoMdto prescricaoMdtoOrigem;
	private MpmTipoFrequenciaAprazamento tipoFreqAprazamento;
	private MpmPrescricaoMdto prescricaoMdtoReprescritoOrigem;
	private AfaTipoVelocAdministracoes tipoVelocAdministracao;
	private RapServidores servidor;
	private AfaViaAdministracao viaAdministracao;
	private String vadSigla;
	private Date dthrInicio;
	private Boolean indSeNecessario;
	private Boolean indItemRecomendadoAlta;
	private Short frequencia;
	private Date horaInicioAdministracao;
	private String observacao;
	private BigDecimal gotejo;
	private Short qtdeHorasCorrer;
	private Short duracaoTratSolicitado;
	private Date dthrInicioTratamento;
	private Boolean indSolucao;
	private Boolean indItemRecTransferencia;
	private DominioUnidadeHorasMinutos unidHorasCorrer;
	private AfaMedicamento diluente;
	private BigDecimal volumeDiluenteMl;
	private Boolean indBombaInfusao;
	private Integer ordem;

	private Set<MpmPrescricaoMdto> prescricoesMdtosReprescritosOrigem = new HashSet<MpmPrescricaoMdto>(
			0);

	private List<MpmItemPrescricaoMdto> itensPrescricaoMdtos = new ArrayList<MpmItemPrescricaoMdto>(
			0);
	private Set<MpmPrescricaoMdto> prescricoesMdtosOrigem = new HashSet<MpmPrescricaoMdto>(
			0);	
	private Integer pmdAtdSeqPrcrAnt;
	private Long pmdSeqPrcrAnt;

	private enum PrescricaoMdtoExceptionCode implements BusinessExceptionCode {
		PARAMETROS_INCONSISTENTES, DATA_FIM_INVALIDA, FREQUENCIA_INVALIDA, GOTEJO_INVALIDO, QUANTIDADE_HORAS_CORRER_INVALIDA, DURACAO_TRATAMENTO_SOLICITADO_INVALIDO
	}

	@Transient
	private Boolean indAntiMicrobiano;
	
	//Transient
	public TipoOperacaoEnum tipoOperacaoBanco;
	
	public MpmPrescricaoMdto() {
	}

	public MpmPrescricaoMdto(MpmPrescricaoMdtoId id,
			MpmTipoFrequenciaAprazamento mpmTipoFreqAprazamentos,
			RapServidores servidor,
			AfaTipoVelocAdministracoes tipoVelocAdministracao, Date dthrInicio,
			Date criadoEm, Boolean indSeNecessario,
			Boolean indItemRecomendadoAlta,
			DominioIndPendenteItemPrescricao indPendente,
			Boolean indItemRecTransferencia, Boolean indBombaInfusao) {
		this.id = id;
		this.tipoFreqAprazamento = mpmTipoFreqAprazamentos;
		this.servidor = servidor;
		this.tipoVelocAdministracao = tipoVelocAdministracao;
		this.dthrInicio = dthrInicio;
		this.criadoEm = criadoEm;
		this.indSeNecessario = indSeNecessario;
		this.indItemRecomendadoAlta = indItemRecomendadoAlta;
		this.indPendente = indPendente;
		this.indItemRecTransferencia = indItemRecTransferencia;
		this.indBombaInfusao = indBombaInfusao;
	}

	@SuppressWarnings({"PMD.ExcessiveParameterList"})
	public MpmPrescricaoMdto(MpmPrescricaoMdtoId id,
			MpmPrescricaoMedica mpmPrescricaoMedica,
			MpmPrescricaoMdto mpmPrescricaoMdtosByMpmPmdPmdFk1,
			MpmTipoFrequenciaAprazamento mpmTipoFreqAprazamentos,
			MpmPrescricaoMdto mpmPrescricaoMdtosByMpmPmdPmdFk2,
			AfaTipoVelocAdministracoes tipoVelocAdministracao,
			RapServidores servidor, RapServidores servidorMovimentado,
			AfaViaAdministracao viaAdministracao, Date dthrInicio,
			Date criadoEm, Boolean indSeNecessario,
			Boolean indItemRecomendadoAlta,
			DominioIndPendenteItemPrescricao indPendente, Date dthrFim,
			Short frequencia, Date horaInicioAdministracao, String observacao,
			BigDecimal gotejo, Short qtdeHorasCorrer,
			Short duracaoTratSolicitado, Date dthrInicioTratamento,
			Date alteradoEm, Boolean indSolucao,
			RapServidores servidorMatriculaMvtoValida,
			RapServidores servidorMatriculaValida, Date dthrValida,
			Date dthrValidaMvto, Boolean indItemRecTransferencia,
			DominioUnidadeHorasMinutos unidHorasCorrer,
			AfaMedicamento medMatCodigo, BigDecimal volumeDiluenteMl,
			Boolean indBombaInfusao,
			Set<MpmPrescricaoMdto> mpmPrescricaoMdtosesForMpmPmdPmdFk2,
			List<MpmItemPrescricaoMdto> mpmItemPrescricaoMdtoses,
			Set<MpmPrescricaoMdto> mpmPrescricaoMdtosesForMpmPmdPmdFk1) {
		this.id = id;
		this.prescricaoMedica = mpmPrescricaoMedica;
		this.prescricaoMdtoOrigem = mpmPrescricaoMdtosByMpmPmdPmdFk1;
		this.tipoFreqAprazamento = mpmTipoFreqAprazamentos;
		this.prescricaoMdtoReprescritoOrigem = mpmPrescricaoMdtosByMpmPmdPmdFk2;
		this.tipoVelocAdministracao = tipoVelocAdministracao;
		this.servidor = servidor;
		this.servidorMovimentado = servidorMovimentado;
		this.viaAdministracao = viaAdministracao;
		this.dthrInicio = dthrInicio;
		this.criadoEm = criadoEm;
		this.indSeNecessario = indSeNecessario;
		this.indItemRecomendadoAlta = indItemRecomendadoAlta;
		this.indPendente = indPendente;
		this.dthrFim = dthrFim;
		this.frequencia = frequencia;
		this.horaInicioAdministracao = horaInicioAdministracao;
		this.observacao = observacao;
		this.gotejo = gotejo;
		this.qtdeHorasCorrer = qtdeHorasCorrer;
		this.duracaoTratSolicitado = duracaoTratSolicitado;
		this.dthrInicioTratamento = dthrInicioTratamento;
		this.alteradoEm = alteradoEm;
		this.indSolucao = indSolucao;
		this.servidorValidaMovimentacao = servidorMatriculaMvtoValida;
		this.servidorValidacao = servidorMatriculaValida;
		this.dthrValida = dthrValida;
		this.dthrValidaMovimentacao = dthrValidaMvto;
		this.indItemRecTransferencia = indItemRecTransferencia;
		this.unidHorasCorrer = unidHorasCorrer;
		this.diluente = medMatCodigo;
		this.volumeDiluenteMl = volumeDiluenteMl;
		this.indBombaInfusao = indBombaInfusao;
		this.prescricoesMdtosReprescritosOrigem = mpmPrescricaoMdtosesForMpmPmdPmdFk2;
		this.itensPrescricaoMdtos = mpmItemPrescricaoMdtoses;
		this.prescricoesMdtosOrigem = mpmPrescricaoMdtosesForMpmPmdPmdFk1;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "atdSeq", column = @Column(name = "ATD_SEQ", nullable = false, precision = 7, scale = 0)),
			@AttributeOverride(name = "seq", column = @Column(name = "SEQ", nullable = false, precision = 14, scale = 0)) })
	public MpmPrescricaoMdtoId getId() {
		return this.id;
	}

	public void setId(MpmPrescricaoMdtoId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "PMD_ATD_SEQ", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "PMD_SEQ", referencedColumnName = "SEQ") })
	public MpmPrescricaoMdto getPrescricaoMdtoOrigem() {
		return this.prescricaoMdtoOrigem;
	}

	public void setPrescricaoMdtoOrigem(
			MpmPrescricaoMdto mpmPrescricaoMdtosByMpmPmdPmdFk1) {
		this.prescricaoMdtoOrigem = mpmPrescricaoMdtosByMpmPmdPmdFk1;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TFQ_SEQ", nullable = false)
	public MpmTipoFrequenciaAprazamento getTipoFreqAprazamento() {
		return this.tipoFreqAprazamento;
	}

	public void setTipoFreqAprazamento(
			MpmTipoFrequenciaAprazamento mpmTipoFreqAprazamentos) {
		this.tipoFreqAprazamento = mpmTipoFreqAprazamentos;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "PMD_ATD_SEQ_REPRESC", referencedColumnName = "ATD_SEQ"),
			@JoinColumn(name = "PMD_SEQ_REPRESC", referencedColumnName = "SEQ") })
	public MpmPrescricaoMdto getPrescricaoMdtoReprescritoOrigem() {
		return this.prescricaoMdtoReprescritoOrigem;
	}

	public void setPrescricaoMdtoReprescritoOrigem(
			MpmPrescricaoMdto mpmPrescricaoMdtosByMpmPmdPmdFk2) {
		this.prescricaoMdtoReprescritoOrigem = mpmPrescricaoMdtosByMpmPmdPmdFk2;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "TVA_SEQ", referencedColumnName = "SEQ", nullable = true)
	public AfaTipoVelocAdministracoes getTipoVelocAdministracao() {
		return this.tipoVelocAdministracao;
	}

	public void setTipoVelocAdministracao(AfaTipoVelocAdministracoes tvaSeq) {
		this.tipoVelocAdministracao = tvaSeq;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns( {
			@JoinColumn(name = "SER_MATRICULA", referencedColumnName = "MATRICULA", nullable = false),
			@JoinColumn(name = "SER_VIN_CODIGO", referencedColumnName = "VIN_CODIGO", nullable = false) })
	public RapServidores getServidor() {
		return this.servidor;
	}

	public void setServidor(RapServidores servidor) {
		this.servidor = servidor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VAD_SIGLA", referencedColumnName = "SIGLA")
	public AfaViaAdministracao getViaAdministracao() {
		return this.viaAdministracao;
	}

	public void setViaAdministracao(AfaViaAdministracao vadSigla) {
		this.viaAdministracao = vadSigla;
	}

	@Column(name = "VAD_SIGLA", insertable = false, updatable = false)
	public String getVadSigla() {
		return vadSigla;
	}

	public void setVadSigla(String vadSigla) {
		this.vadSigla = vadSigla;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_INICIO", nullable = false, length = 7)
	public Date getDthrInicio() {
		return this.dthrInicio;
	}

	public void setDthrInicio(Date dthrInicio) {
		this.dthrInicio = dthrInicio;
	}

	@Column(name = "IND_SE_NECESSARIO", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndSeNecessario() {
		return this.indSeNecessario;
	}

	public void setIndSeNecessario(Boolean indSeNecessario) {
		this.indSeNecessario = indSeNecessario;
	}

	@Column(name = "IND_ITEM_RECOMENDADO_ALTA", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndItemRecomendadoAlta() {
		return this.indItemRecomendadoAlta;
	}

	public void setIndItemRecomendadoAlta(Boolean indItemRecomendadoAlta) {
		this.indItemRecomendadoAlta = indItemRecomendadoAlta;
	}

	@Column(name = "FREQUENCIA", precision = 3, scale = 0)
	public Short getFrequencia() {
		return this.frequencia;
	}

	public void setFrequencia(Short frequencia) {
		this.frequencia = frequencia;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "HORA_INICIO_ADMINISTRACAO", length = 7)
	public Date getHoraInicioAdministracao() {
		return this.horaInicioAdministracao;
	}

	public void setHoraInicioAdministracao(Date horaInicioAdministracao) {
		this.horaInicioAdministracao = horaInicioAdministracao;
	}

	@Column(name = "OBSERVACAO", length = 240)
	@Length(max = 240)
	public String getObservacao() {
		return this.observacao;
	}

	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	@Column(name = "GOTEJO", precision = 5, scale = 2)
	public BigDecimal getGotejo() {
		return this.gotejo;
	}

	public void setGotejo(BigDecimal gotejo) {
		this.gotejo = gotejo;
	}

	@Column(name = "QTDE_HORAS_CORRER", precision = 2, scale = 0)
	public Short getQtdeHorasCorrer() {
		return this.qtdeHorasCorrer;
	}

	public void setQtdeHorasCorrer(Short qtdeHorasCorrer) {
		this.qtdeHorasCorrer = qtdeHorasCorrer;
	}

	@Column(name = "DURACAO_TRAT_SOLICITADO", precision = 3, scale = 0)
	public Short getDuracaoTratSolicitado() {
		return this.duracaoTratSolicitado;
	}

	public void setDuracaoTratSolicitado(Short duracaoTratSolicitado) {
		this.duracaoTratSolicitado = duracaoTratSolicitado;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DTHR_INICIO_TRATAMENTO", length = 7)
	public Date getDthrInicioTratamento() {
		return this.dthrInicioTratamento;
	}

	public void setDthrInicioTratamento(Date dthrInicioTratamento) {
		this.dthrInicioTratamento = dthrInicioTratamento;
	}

	@Column(name = "IND_SOLUCAO", length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndSolucao() {
		return this.indSolucao;
	}

	public void setIndSolucao(Boolean indSolucao) {
		this.indSolucao = indSolucao;
	}

	@Column(name = "IND_ITEM_REC_TRANSFERENCIA", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndItemRecTransferencia() {
		return this.indItemRecTransferencia;
	}

	public void setIndItemRecTransferencia(Boolean indItemRecTransferencia) {
		this.indItemRecTransferencia = indItemRecTransferencia;
	}

	@Column(name = "UNID_HORAS_CORRER", length = 1)
	@Enumerated(EnumType.STRING)
	public DominioUnidadeHorasMinutos getUnidHorasCorrer() {
		return this.unidHorasCorrer;
	}

	public void setUnidHorasCorrer(DominioUnidadeHorasMinutos unidHorasCorrer) {
		this.unidHorasCorrer = unidHorasCorrer;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MED_MAT_CODIGO")
	public AfaMedicamento getDiluente() {
		return this.diluente;
	}

	public void setDiluente(AfaMedicamento medMatCodigo) {
		this.diluente = medMatCodigo;
	}

	@Column(name = "VOLUME_DILUENTE_ML", precision = 8, scale = 3)
	public BigDecimal getVolumeDiluenteMl() {
		return this.volumeDiluenteMl;
	}

	public void setVolumeDiluenteMl(BigDecimal volumeDiluenteMl) {
		this.volumeDiluenteMl = volumeDiluenteMl;
	}

	@Column(name = "IND_BOMBA_INFUSAO", nullable = false, length = 1)
	@org.hibernate.annotations.Type(type = "br.gov.mec.aghu.core.persistence.type.BooleanUserType")
	public Boolean getIndBombaInfusao() {
		return this.indBombaInfusao;
	}

	public void setIndBombaInfusao(Boolean indBombaInfusao) {
		this.indBombaInfusao = indBombaInfusao;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "prescricaoMdtoOrigem")
	public Set<MpmPrescricaoMdto> getPrescricoesMdtosOrigem() {
		return this.prescricoesMdtosOrigem;
	}

	public void setPrescricoesMdtosOrigem(
			Set<MpmPrescricaoMdto> mpmPrescricaoMdtosesForMpmPmdPmdFk2) {
		this.prescricoesMdtosOrigem = mpmPrescricaoMdtosesForMpmPmdPmdFk2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "prescricaoMedicamento")
	public List<MpmItemPrescricaoMdto> getItensPrescricaoMdtos() {
		return this.itensPrescricaoMdtos;
	}

	public void setItensPrescricaoMdtos(
			List<MpmItemPrescricaoMdto> mpmItemPrescricaoMdtoses) {
		this.itensPrescricaoMdtos = mpmItemPrescricaoMdtoses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "prescricaoMdtoReprescritoOrigem")
	public Set<MpmPrescricaoMdto> getPrescricoesMdtosReprescritosOrigem() {
		return this.prescricoesMdtosReprescritosOrigem;
	}

	public void setPrescricoesMdtosReprescritosOrigem(
			Set<MpmPrescricaoMdto> mpmPrescricaoMdtosesForMpmPmdPmdFk1) {
		this.prescricoesMdtosReprescritosOrigem = mpmPrescricaoMdtosesForMpmPmdPmdFk1;
	}
	
	@Column(name = "PMD_ATD_SEQ_PRCR_ANT", length = 9)
	public Integer getPmdAtdSeqPrcrAnt() {
		return pmdAtdSeqPrcrAnt;
	}

	public void setPmdAtdSeqPrcrAnt(Integer pmdAtdSeqPrcrAnt) {
		this.pmdAtdSeqPrcrAnt = pmdAtdSeqPrcrAnt;
	}
	
	@Column(name = "PMD_SEQ_PRCR_ANT", length = 14)
	public Long getPmdSeqPrcrAnt() {
		return pmdSeqPrcrAnt;
	}

	public void setPmdSeqPrcrAnt(Long pmdSeqPrcrAnt) {
		this.pmdSeqPrcrAnt = pmdSeqPrcrAnt;
	}
	
	@Column(name = "ORDEM", nullable = false)
	public Integer getOrdem() {
		return this.ordem;
	}
	public void setOrdem(Integer ordem) {
		this.ordem = ordem;
	}

	@PrePersist
	@PreUpdate
	@SuppressWarnings({"unused", "PMD.NPathComplexity"})
	private void validacoes() throws BaseRuntimeException {

		if (!((this.getIndItemRecomendadoAlta() && getIndPendente().equals(
				DominioIndPendenteItemPrescricao.N)) || (!getIndItemRecomendadoAlta()))) {
			throw new BaseRuntimeException(
					PrescricaoMdtoExceptionCode.PARAMETROS_INCONSISTENTES);
		}

		if (!(getDthrFim() == null || (getDthrFim() != null && DateUtil
				.validaDataMaiorIgual(getDthrFim(), getDthrInicio())))) {
			throw new BaseRuntimeException(
					PrescricaoMdtoExceptionCode.DATA_FIM_INVALIDA);
		}

		if (!(getFrequencia() == null || (getFrequencia() != null && getFrequencia() > 0))) {
			throw new BaseRuntimeException(
					PrescricaoMdtoExceptionCode.FREQUENCIA_INVALIDA);
		}

		if (!(getGotejo() == null || (getGotejo() != null && getGotejo()
				.doubleValue() > 0))) {
			throw new BaseRuntimeException(
					PrescricaoMdtoExceptionCode.GOTEJO_INVALIDO);
		}

		if (!(getQtdeHorasCorrer() == null || (getQtdeHorasCorrer() != null && getQtdeHorasCorrer() > 0))) {
			throw new BaseRuntimeException(
					PrescricaoMdtoExceptionCode.QUANTIDADE_HORAS_CORRER_INVALIDA);
		}

		if (!(getDuracaoTratSolicitado() == null || (getDuracaoTratSolicitado() != null && getDuracaoTratSolicitado() > 0))) {
			throw new BaseRuntimeException(
					PrescricaoMdtoExceptionCode.DURACAO_TRATAMENTO_SOLICITADO_INVALIDO);
		}
	}

	@Override
	public int hashCode() {
		return this.id == null ? 0 : this.id.hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof MpmPrescricaoMdto)) {
			return false;
		}

		MpmPrescricaoMdto other = (MpmPrescricaoMdto) obj;
		return (getId() != null && getId().equals(other.getId()));
	}

	public enum Fields {
		ID("id"), 
		DILUENTE("diluente"),
		ATD_SEQ("id.atdSeq"), SEQ("id.seq"), DTHR_INICIO("dthrInicio"), DTHR_FIM(
				"dthrFim"), DTHR_INICIO_TRATAMENTO("dthrInicioTratamento"), PRESCRICAOMEDICA_ID(
				"prescricaoMedica.id"), PRESCRICAOMEDICA("prescricaoMedica"), PME_SEQ(
				"prescricaoMedica.id.seq"), INDSOLUCAO("indSolucao"), PRESCRICAO_MDTO_REPRESCRITO_ORIGEM(
				"prescricaoMdtoReprescritoOrigem"), PMD_ATD_SEQ_REPRESC(
				"prescricaoMdtoReprescritoOrigem.id.atdSeq"), PMD_SEQ_REPRESC(
				"prescricaoMdtoReprescritoOrigem.id.seq"), CRIADO_EM("criadoEm"), ALTERADO_EM(
				"alteradoEm"), PENDENTE("indPendente"), DURACAO_TRAT_SOL(
				"duracaoTratSolicitado"), 
				TIPO_VELOC_ADMINISTRACAO("tipoVelocAdministracao"),TIPO_VELC_ADM_SEQ("tipoVelocAdministracao.seq"), 
				INDPENDENTE("indPendente"), FREQUENCIA(
				"frequencia"), TIPO_FREQ_APRAZAMENTO("tipoFreqAprazamento"), TIPO_FREQ_APZ_SEQ("tipoFreqAprazamento.seq"), 
				PRESCRICAOMDTOORIGEM_SEQ("prescricaoMdtoOrigem.id.seq"),
				PRESCRICAOMDTOORIGEM_ATDSEQ("prescricaoMdtoOrigem.id.atdSeq"),
				PRESCRICAO_MDTO_ORIGEM("prescricaoMdtoOrigem"), IND_ITEM_RECOMENDADO_ALTA("indItemRecomendadoAlta"),
				VIA_ADMINISTRACAO("viaAdministracao"),
				VIAADMINISTRACAO_SIGLA("viaAdministracao.sigla"), INDSENECESSARIO("indSeNecessario"), HORAINICIOADMINISTRACAO(
				"horaInicioAdministracao"), OBSERVACAO("observacao"), GOTEJO(
				"gotejo"), QTDEHORASCORRER("qtdeHorasCorrer"),
				SERVIDOR_VALIDACAO("servidorValidacao"),IND_ANTI_MICROBIANO("indAntiMicrobiano"),
				ITENS_PRESCRICAO_MDTOS("itensPrescricaoMdtos"),
				ATENDIMENTO("atendimento"),
				TIPO_FREQ_APZ("tipoFreqAprazamento"),
				TIPO_VELC_ADM("tipoVelocAdministracao"),
				PRESCRICAO_MEDICA_ORIGEM("prescricaoMdtoOrigem.prescricaoMedica"),
				ORDEM("ordem");

		private String fields;

		private Fields(String fields) {
			this.fields = fields;
		}

		@Override
		public String toString() {
			return this.fields;
		}
	}

	/**
	 * if c.ind_solucao = 'S' then v_tipo_item := 'S:'; else v_tipo_item :=
	 * 'M:'; end if;
	 */
	@Transient
	public PrescricaoMedicaTypes getTipo() {
		if (this.getIndSolucao()) {
			return PrescricaoMedicaTypes.SOLUCAO;
		} else {
			return PrescricaoMedicaTypes.MEDICAMENTO;
		}
	}

	private String getNumeroFormatado(Number value, String fieldName) {
		String numFormated = "";
		if (value != null) {
			numFormated = AghuNumberFormat.formatarValor(value,
					this.getClass(), fieldName);
		}
		return numFormated;
	}

	/**
	 * c.vad_sigla c.sint_tfq c.frequencia c.desc_tfq
	 * c.hora_inicio_administracao c.concentracao c.desc_umm_med
	 * c.volume_diluente_ml c.qtde_horas_correr c.unid_horas_correr c.gotejo
	 * c.desc_tva c.ind_bomba_infusao c.ind_se_necessario c.observacao
	 * c.dthr_inicio_tratamento
	 * 
	 * @see br.gov.mec.aghu.model.interfaces.PrescricaoMedicaDescricao#getDescricao()
	 */
	@Override
	@Transient
	@SuppressWarnings({"PMD.NPathComplexity"})
	public String getDescricaoFormatada() {
		StringBuilder strBuilder = new StringBuilder("");
		boolean hasFilhos = false;
		boolean descricao = true;
		//AJUSTE - EM FUNÇÃO DA ALTERAÇÃO NO DILUENTE
		boolean loop = true;
		if(this.getDiluente() != null) {
			loop = false;
		}

		boolean diluenteEncontrado = Boolean.FALSE;
		for (MpmItemPrescricaoMdto itemPrescricaoMedicamento : this
				.getItensPrescricaoMdtos()) {
			
			if(!this.getIndSolucao()){
				if (this.getItensPrescricaoMdtos().size() > 1){
					if(itemPrescricaoMedicamento.getMedicamento().equals(this.getDiluente()) && !diluenteEncontrado) {
						diluenteEncontrado = Boolean.TRUE;
						continue;
					}
				}
			}
			hasFilhos = true;
			if(( this.getDiluente() != null || descricao ) || this.getIndSolucao() ){
			strBuilder
					.append(itemPrescricaoMedicamento.getDescricaoFormatada());
				descricao = false;
			}
			if (this.getIndSolucao()) {
				strBuilder.append(DEBRA_LINHA);
			}
			if(!loop) {
				break;
			}
		}
		// TODO revisar hardcode
		if (hasFilhos) {
			strBuilder.append(' ')
					.append(this.getViaAdministracao().getSigla()).append("; ");

			// Por regra do SQL this.getTipoFreqAprazamento() nao deveria ser
			// nulo.
			if (StringUtils.isNotBlank(this.getTipoFreqAprazamento()
					.getSintaxe())) {
				strBuilder.append(this.getTipoFreqAprazamento()
						.getSintaxeFormatada(this.getFrequencia()));
			} else {
				strBuilder.append(this.getTipoFreqAprazamento().getDescricao());
			}
			strBuilder.append("; ");

			if (this.getHoraInicioAdministracao() != null) {
				SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
				strBuilder.append("I=").append(
						sdf.format(this.getHoraInicioAdministracao())).append(
						" h; ");
			}

			StringBuilder stbDiluente = new StringBuilder();
			if (this.getDiluente() != null) {
				stbDiluente.append(this.getDiluente().getDescricao());
				if (this.getDiluente().getConcentracao() != null) {
					stbDiluente.append(' ').append(
							this.getDiluente().getConcentracaoFormatada());
				}
				if (this.getDiluente().getMpmUnidadeMedidaMedicas() != null
						&& this.getDiluente().getMpmUnidadeMedidaMedicas()
								.getDescricao() != null) {
					stbDiluente.append(' ').append(
							this.getDiluente().getMpmUnidadeMedidaMedicas()
									.getDescricao());
				}
			}

			if (stbDiluente.length() > 0) {
				if (this.getVolumeDiluenteMl() != null) {
					strBuilder.append(" Diluir em ").append(
							getNumeroFormatado(this.getVolumeDiluenteMl(),
									"volumeDiluenteMl")).append(" ml de ")
							.append(stbDiluente.toString()).append("; ");
				} else {
					strBuilder.append(" Diluir em ").append(
							stbDiluente.toString()).append("; ");
				}
			} else {
				if (this.getVolumeDiluenteMl() != null) {
					strBuilder.append(" Diluir em ").append(
							getNumeroFormatado(this.getVolumeDiluenteMl(),
									"volumeDiluenteMl")).append(" ml; ");
				}
			}

			if (this.getQtdeHorasCorrer() != null) {
				strBuilder.append("Correr em ").append(
						this.getQtdeHorasCorrer());
				if (this.getUnidHorasCorrer() == null
						|| DominioUnidadeHorasMinutos.H.equals(this
								.getUnidHorasCorrer())) {
					strBuilder.append(" horas; ");
				} else {
					strBuilder.append(" minutos; ");
				}
			}

			if (this.getGotejo() != null) {
				strBuilder.append("Velocidade de Infusão ").append(
						getNumeroFormatado(this.getGotejo(), "gotejo")).append(' ');
				if (this.getTipoVelocAdministracao() != null) {
					strBuilder.append(this.getTipoVelocAdministracao()
							.getDescricao());
				} else {
					// Tipo velocidade administracao pode ser nulo, no sistema
					// antigo nao era tratado.
					strBuilder
							.append("ERRO: tipo velocidade administracao nao informado");
				}
				strBuilder.append("; ");
			}

			if (this.getIndBombaInfusao()) {
				strBuilder.append("BI").append("; ");
			}

			if (this.getIndSeNecessario()) {
				strBuilder.append("Se Necessário; ");
			}

			if (StringUtils.isNotBlank(this.getObservacao())) {
				strBuilder.append(this.getObservacao()).append("; ");
			}

			if (this.getIndAntiMicrobiano()
					&& this.getDthrInicioTratamento() != null
					&& this.getPrescricaoMedica() != null
					&& this.getPrescricaoMedica().getDtReferencia() != null) {

				Date dtPmeInicioVigencia = this.getPrescricaoMedica()
						.getDtReferencia();
				strBuilder.append(" Dia de Administração: ").append(
						getTempoDuracao(dtPmeInicioVigencia, this.getDthrInicioTratamento())).append("; ");
			}

		}// if hasFilhos

		return strBuilder.toString().trim();
	}

	/**
	 * Obtem a descrição a ser exibida no relatório. Refatorar posteriormente.
	 * 
	 * @return
	 */
	@Transient
	@SuppressWarnings({"PMD.NPathComplexity"})
	public String getDescricaoFormatadaRelatorio() {
		StringBuilder strBuilder = new StringBuilder("");
		boolean hasFilhos = false;

		//AJUSTE - EM FUNÇÃO DA ALTERAÇÃO NO DILUENTE
		boolean loop = true;
		if(this.getDiluente() != null) {
			loop = false;
		}

		for (MpmItemPrescricaoMdto itemPrescricaoMedicamento : this
				.getItensPrescricaoMdtos()) {
			//Ajuste que foi necessário devido à melhoria #18867
			if(!this.getIndSolucao()){
				if (this.getItensPrescricaoMdtos().size() > 1){
					if (itemPrescricaoMedicamento.equals(this.getItensPrescricaoMdtos().get(0))){
						continue;
					}
				}
			}		
			
			hasFilhos = true;
			strBuilder
					.append(itemPrescricaoMedicamento.getDescricaoFormatada());
			if (this.getIndSolucao()) {
				strBuilder.append(DEBRA_LINHA);
			}
			if(!loop) {
				break;
			}
		}
		// TODO revisar hardcode
		if (hasFilhos) {
			strBuilder.append(' ')
					.append(this.getViaAdministracao().getSigla()).append("; ");

			// Por regra do SQL this.getTipoFreqAprazamento() nao deveria ser
			// nulo.
			if (StringUtils.isNotBlank(this.getTipoFreqAprazamento()
					.getSintaxe())) {
				strBuilder.append(this.getTipoFreqAprazamento()
						.getSintaxeFormatada(this.getFrequencia()));
			} else {
				strBuilder.append(this.getTipoFreqAprazamento().getDescricao());
			}
			strBuilder.append("; ");

			if (this.getHoraInicioAdministracao() != null) {
				SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
				strBuilder.append("I=").append(
						sdf.format(this.getHoraInicioAdministracao())).append(
						" h; ");
			}

			StringBuilder stbDiluente = new StringBuilder();
			if (this.getDiluente() != null) {
				stbDiluente.append(this.getDiluente().getDescricao());
				if (this.getDiluente().getConcentracao() != null) {
					stbDiluente.append(' ').append(
							this.getDiluente().getConcentracaoFormatada());
				}
				if (this.getDiluente().getMpmUnidadeMedidaMedicas() != null
						&& this.getDiluente().getMpmUnidadeMedidaMedicas()
								.getDescricao() != null) {
					stbDiluente.append(' ').append(
							this.getDiluente().getMpmUnidadeMedidaMedicas()
									.getDescricao());
				}
			}

			if (stbDiluente.length() > 0) {
				if (this.getVolumeDiluenteMl() != null) {
					strBuilder.append(" Diluir em ").append(
							getNumeroFormatado(this.getVolumeDiluenteMl(),
									"volumeDiluenteMl")).append(" ml de ")
							.append(stbDiluente.toString()).append("; ");
				} else {
					strBuilder.append(" Diluir em ").append(
							stbDiluente.toString()).append("; ");
				}
			} else {
				if (this.getVolumeDiluenteMl() != null) {
					strBuilder.append(" Diluir em ").append(
							getNumeroFormatado(this.getVolumeDiluenteMl(),
									"volumeDiluenteMl")).append(" ml; ");
				}
			}

			if (this.getQtdeHorasCorrer() != null) {
				strBuilder.append("Correr em ").append(
						this.getQtdeHorasCorrer());
				if (this.getUnidHorasCorrer() == null
						|| DominioUnidadeHorasMinutos.H.equals(this
								.getUnidHorasCorrer())) {
					strBuilder.append(" horas; ");
				} else {
					strBuilder.append(" minutos; ");
				}
			}

			if (this.getGotejo() != null) {
				strBuilder.append("Velocidade de Infusão ").append(
						getNumeroFormatado(this.getGotejo(), "gotejo")).append(' ');
				if (this.getTipoVelocAdministracao() != null) {
					strBuilder.append(this.getTipoVelocAdministracao()
							.getDescricao());
				} else {
					// Tipo velocidade administracao pode ser nulo, no sistema
					// antigo nao era tratado.
					strBuilder
							.append("ERRO: tipo velocidade administracao nao informado");
				}
				strBuilder.append("; ");
			}

			if (this.getIndBombaInfusao()) {
				strBuilder.append("BI").append("; ");
			}

			if (this.getIndSeNecessario()) {
				strBuilder.append("Se Necessário; ");
			}

			if (StringUtils.isNotBlank(this.getObservacao())) {
				strBuilder.append("<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obs.:&nbsp;" )
				.append(this.getObservacao());
						
			}

			if (this.getIndAntiMicrobiano()
					&& this.getDthrInicioTratamento() != null
					&& this.getPrescricaoMedica() != null
					&& this.getPrescricaoMedica().getDtReferencia() != null) {

				Date dtPmeInicioVigencia = this.getPrescricaoMedica()
						.getDtReferencia();
				strBuilder.append("<br/> Dia de Administração: ").append(
						getTempoDuracao(dtPmeInicioVigencia, this.getDthrInicioTratamento())).append("; ");
			}

		}// if hasFilhos

		return strBuilder.toString().trim();
	}

	@Transient
	@SuppressWarnings({"PMD.NPathComplexity"})
	public String getDescricaoFormatadaSemObservacao(Boolean incluirDiaAdministracao) {
		StringBuilder strBuilder = new StringBuilder(38);
		boolean hasFilhos = false;

		//AJUSTE - EM FUNÇÃO DA ALTERAÇÃO NO DILUENTE
		boolean loop = true;
		if(this.getDiluente() != null) {
			loop = false;
		}

		try {
		for (MpmItemPrescricaoMdto itemPrescricaoMedicamento : this
				.getItensPrescricaoMdtos()) {
			//Ajuste que foi necessário devido à melhoria #18867
			if(!this.getIndSolucao()){
				if (this.getItensPrescricaoMdtos().size() > 1){
					if (itemPrescricaoMedicamento.equals(this.getItensPrescricaoMdtos().get(0))){
						continue;
					}
				}
			}	
			
			hasFilhos = true;
			strBuilder
					.append(itemPrescricaoMedicamento.getDescricaoFormatada());
			if (this.getIndSolucao()) {
				strBuilder.append(DEBRA_LINHA);
			}
			if(!loop) {
				break;
			}
		}
		} catch (Exception e) {
			strBuilder
			.append("<<Erro ao Montar Descrição do Item>>");
		}

		// TODO revisar hardcode
		if (hasFilhos) {
			strBuilder.append(' ')
					.append(this.getViaAdministracao().getSigla()).append("; ");

			// Por regra do SQL this.getTipoFreqAprazamento() nao deveria ser
			// nulo.
			if (StringUtils.isNotBlank(this.getTipoFreqAprazamento()
					.getSintaxe())) {
				strBuilder.append(this.getTipoFreqAprazamento()
						.getSintaxeFormatada(this.getFrequencia()));
			} else {
				strBuilder.append(this.getTipoFreqAprazamento().getDescricao());
			}
			strBuilder.append("; ");

			if (this.getHoraInicioAdministracao() != null) {
				SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
				strBuilder.append("I=").append(
						sdf.format(this.getHoraInicioAdministracao())).append(
						" h; ");
			}

			StringBuilder stbDiluente = new StringBuilder();
			try{
			if (this.getDiluente() != null) {
				stbDiluente.append(this.getDiluente().getDescricao());
				if (this.getDiluente().getConcentracao() != null) {
					// TODO formatar a concentracao (14,4) #.###.###.###,####
					stbDiluente.append(' ').append(
							this.getDiluente().getConcentracaoFormatada());
				}
				if (this.getDiluente().getMpmUnidadeMedidaMedicas() != null
						&& this.getDiluente().getMpmUnidadeMedidaMedicas()
								.getDescricao() != null) {
					stbDiluente.append(' ').append(
							this.getDiluente().getMpmUnidadeMedidaMedicas()
									.getDescricao());
				}
			}

			if (stbDiluente.length() > 0) {
				if (this.getVolumeDiluenteMl() != null) {
					strBuilder.append(" Diluir em ").append(
							this.getVolumeDiluenteMl()).append(" ml de ")
							.append(stbDiluente.toString()).append("; ");
				} else {
					strBuilder.append(" Diluir em ").append(
							stbDiluente.toString()).append("; ");
				}
			} else {
				if (this.getVolumeDiluenteMl() != null) {
					strBuilder.append(" Diluir em ").append(
							this.getVolumeDiluenteMl()).append(" ml; ");
				}
			}
			} catch (Exception e) {
				strBuilder
				.append("<<Erro ao Montar Diluente>>");
			}

			if (this.getQtdeHorasCorrer() != null) {
				strBuilder.append("Correr em ").append(
						this.getQtdeHorasCorrer());
				if (this.getUnidHorasCorrer() == null
						|| DominioUnidadeHorasMinutos.H.equals(this
								.getUnidHorasCorrer())) {
					strBuilder.append(" horas; ");
				} else {
					strBuilder.append(" minutos; ");
				}
			}

			if (this.getGotejo() != null) {
				strBuilder.append("Gotejo ").append(this.getGotejo()).append(' ');
				if (this.getTipoVelocAdministracao() != null) {
					strBuilder.append(this.getTipoVelocAdministracao()
							.getDescricao());
				} else {
					// Tipo velocidade administracao pode ser nulo, no sistema
					// antigo nao era tratado.
					strBuilder
							.append("ERRO: tipo velocidade administracao nao informado");
				}
				strBuilder.append("; ");
			}

			if (this.getIndBombaInfusao()) {
				strBuilder.append("BI").append("; ");
			}

			if (this.getIndSeNecessario()) {
				strBuilder.append("Se Necessário; ");
			}

			if (this.getIndAntiMicrobiano()
					&& this.getDthrInicioTratamento() != null
					&& this.getPrescricaoMedica() != null
					&& this.getPrescricaoMedica().getDthrFim() != null
					&& this.getPrescricaoMedica().getDtReferencia() != null) {

				Date dtRefPrescricaoMedica = this.getPrescricaoMedica()
						.getDthrFim();
//				Date dtRefInicioVigencia = this.getPrescricaoMedica()
//						.getDtReferencia();

				if (incluirDiaAdministracao){
					strBuilder.append(" Dia de Administração: ").append(
							getTempoDuracao(dtRefPrescricaoMedica, this.getDthrInicioTratamento())).append("; ");					
				}
			}

		}
		return strBuilder.toString();
	}

	private Integer getTempoDuracao(Date dtRefPrescricaoMedica, Date dataInicioTratamento) {
		Integer tempoDuracao = DateUtil.diffInDaysInteger(dtRefPrescricaoMedica, dataInicioTratamento);
		if (dataInicioTratamento == null || tempoDuracao < 0) {
			tempoDuracao = 0;
		}
		
		return tempoDuracao.intValue();
	}

	/**
	 * rcorvalao 01/10/2010
	 * 
	 * @return
	 */
	@Transient
	public Boolean getIndAntiMicrobiano() {
		if (this.indAntiMicrobiano == null) {
			this.indAntiMicrobiano = Boolean.FALSE;
			List<MpmItemPrescricaoMdto> itens = this.getItensPrescricaoMdtos();
			for (MpmItemPrescricaoMdto itemPrescricaoMdtos : itens) {
				if (itemPrescricaoMdtos.getIndAntiMicrobiano()) {
					this.indAntiMicrobiano = Boolean.TRUE;
					break;
				}
			}
		}
		return this.indAntiMicrobiano;
	}

	@Override
	@Transient
	public ItemPrescricaoMedica getAnterior() {
		return this.getPrescricaoMdtoOrigem();
	}

	@Override
	@Transient
	public boolean possuiFilhos() {
		//TODO: NÃO DEVERIA NUNCA SER NULO. VERIFICAR POR QUE ISTO OCORRE NOS MEDICAMENTOS
		return (this.getPrescricoesMdtosOrigem() != null && this.getPrescricoesMdtosOrigem().size() > 0);
	}
	
	@Transient
	public String getVolumeDiluenteMlFormatado(){
		return this.getNumeroFormatado(this.getVolumeDiluenteMl(), "volumeDiluenteMl");
	}

	@Transient
	public String getGotejoFormatado(){
		return this.getNumeroFormatado(this.getGotejo(), "gotejo");
	}

	@Transient
	public TipoOperacaoEnum getTipoOperacaoBanco() {
		return tipoOperacaoBanco;
	}

	public void setTipoOperacaoBanco(TipoOperacaoEnum tipoOperacaoBanco) {
		this.tipoOperacaoBanco = tipoOperacaoBanco;
	}

}